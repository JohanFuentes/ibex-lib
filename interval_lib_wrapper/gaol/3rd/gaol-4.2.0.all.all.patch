diff -Naur gaol-4.2.0/gaol/gaol_allocator.h gaol-4.2.0/gaol/gaol_allocator.h
--- gaol-4.2.0/gaol/gaol_allocator.h	2012-03-06 18:08:58.000000000 +0100
+++ gaol-4.2.0/gaol/gaol_allocator.h	2019-06-21 11:08:57.446030219 +0200
@@ -89,7 +89,7 @@
 			return std::numeric_limits<std::size_t>::max() / sizeof ( T );
 		}
 
-		pointer allocate ( size_type num, const void* = 0 ) throw ( std::bad_alloc )
+		pointer allocate ( size_type num, const void* = 0 )
 		{
 			void *buf;
 			if ( MEMALIGN( buf,16,num*sizeof ( value_type ) ) )   // Allocation error?
diff -Naur gaol-4.2.0/gaol/gaol_interval2f.cpp gaol-4.2.0/gaol/gaol_interval2f.cpp
--- gaol-4.2.0/gaol/gaol_interval2f.cpp	2012-03-06 18:08:58.000000000 +0100
+++ gaol-4.2.0/gaol/gaol_interval2f.cpp	2019-06-21 11:10:43.842842834 +0200
@@ -40,7 +40,7 @@
 	}
 
 
-	void* interval2f::operator new(size_t sz) throw(std::bad_alloc)
+	void* interval2f::operator new(size_t sz)
 	{
 		void *buf;
 		if (MEMALIGN(buf,16,sz)) { // error ?
@@ -54,7 +54,7 @@
         free(p);
     }
 
-	void* interval2f::operator new[](size_t sz) throw(std::bad_alloc)
+	void* interval2f::operator new[](size_t sz)
 	{
 		void *buf;
 		if (MEMALIGN(buf,16,sz)) { // error ?
@@ -70,7 +70,7 @@
         free(p);
     }
 
-	void* interval2f::operator new(size_t sz, void *p) throw(std::bad_alloc)
+	void* interval2f::operator new(size_t sz, void *p)
 	{
 		if ((unsigned long long)p % 16 != 0) {
 			throw std::bad_alloc();
diff -Naur gaol-4.2.0/gaol/gaol_interval2f.h gaol-4.2.0/gaol/gaol_interval2f.h
--- gaol-4.2.0/gaol/gaol_interval2f.h	2012-03-06 18:08:58.000000000 +0100
+++ gaol-4.2.0/gaol/gaol_interval2f.h	2019-06-21 11:10:17.773582939 +0200
@@ -94,13 +94,13 @@
 
 
       // Allocators defined to enforce alignment on a 16 bytes boundary
-      __GAOL_PUBLIC__ void *operator new(size_t sz) throw(std::bad_alloc);
+      __GAOL_PUBLIC__ void *operator new(size_t sz);
       __GAOL_PUBLIC__ void operator delete(void *p) throw();
 
-      __GAOL_PUBLIC__ void *operator new[](size_t sz) throw(std::bad_alloc);
+      __GAOL_PUBLIC__ void *operator new[](size_t sz);
       __GAOL_PUBLIC__ void operator delete[](void *p) throw();
 
-      __GAOL_PUBLIC__ void *operator new(size_t sz, void *p) throw(std::bad_alloc);
+      __GAOL_PUBLIC__ void *operator new(size_t sz, void *p);
       __GAOL_PUBLIC__ void operator delete(void *p, void *place) throw();
 
 			friend interval2f pow(const interval2f& I, int n);
diff -Naur gaol-4.2.0/gaol/gaol_interval.h gaol-4.2.0/gaol/gaol_interval.h
--- gaol-4.2.0/gaol/gaol_interval.h	2015-05-21 09:00:45.000000000 +0200
+++ gaol-4.2.0/gaol/gaol_interval.h	2019-06-21 11:08:27.704865552 +0200
@@ -32,6 +32,7 @@
 
 #include <cmath>
 #include <iosfwd>
+#include <ios> /* for std::streamsize, patch from ibex */
 #include <string>
 #include <limits>
 #include "gaol/gaol_config.h"
@@ -262,13 +263,13 @@
     static const __m128d m128d_20mask;
 
     // Allocators defined to enforce alignment on a 16 bytes boundary
-    void *operator new(size_t sz) throw(std::bad_alloc);
+    void *operator new(size_t sz);
     void operator delete(void *p) throw();
 
-    void *operator new[](size_t sz) throw(std::bad_alloc);
+    void *operator new[](size_t sz);
     void operator delete[](void *p) throw();
 
-    void *operator new(size_t sz, void *p) throw(std::bad_alloc);
+    void *operator new(size_t sz, void *p);
     void operator delete(void *p, void *place) throw();
 
 #else // !USING_SSE2_INSTRUCTIONS
diff -Naur gaol-4.2.0/gaol/gaol_interval_sse.cpp gaol-4.2.0/gaol/gaol_interval_sse.cpp
--- gaol-4.2.0/gaol/gaol_interval_sse.cpp	2012-03-06 18:08:58.000000000 +0100
+++ gaol-4.2.0/gaol/gaol_interval_sse.cpp	2019-06-21 11:57:38.571567641 +0200
@@ -35,7 +35,7 @@
 	const __m128d interval::m128_nan = _mm_set1_pd(std::numeric_limits<double>::quiet_NaN());
 	const __m128d interval::m128_infinf = _mm_set1_pd(std::numeric_limits<double>::infinity());
 
-	void* interval::operator new(size_t sz) throw(std::bad_alloc)
+	void* interval::operator new(size_t sz)
 	{
 		void *buf;
 		if (MEMALIGN(buf,16,sz)) { // error ?
@@ -49,7 +49,7 @@
         free(p);
     }
 
-	void* interval::operator new[](size_t sz) throw(std::bad_alloc)
+	void* interval::operator new[](size_t sz)
 	{
 		void *buf;
 		if (MEMALIGN(buf,16,sz)) { // error ?
@@ -65,8 +65,7 @@
         free(p);
     }
 
-	void* interval::operator new(size_t sz, void *p) throw(std::bad_alloc)
-	{
+	void* interval::operator new(size_t sz, void *p)	{
 		if ((unsigned long long)p % 16 != 0) {
 			throw std::bad_alloc();
 		}
diff -Naur gaol-4.2.0/gaol/gaol_port.cpp gaol-4.2.0/gaol/gaol_port.cpp
--- gaol-4.2.0/gaol/gaol_port.cpp	2012-03-06 18:08:58.000000000 +0100
+++ gaol-4.2.0/gaol/gaol_port.cpp	2019-06-21 12:00:06.181266269 +0200
@@ -35,6 +35,12 @@
 
 namespace gaol {
 
+
+  uintdouble NaN_val() {
+	  static uintdouble _NaN_val = {{IFBIGENDIAN(0x7ff80000, 0x0)}};
+	  return _NaN_val;
+  }
+
   int gaol_signbit(double d)
   {
     // The explicit test '!=0' ensures that either 0 or 1 is returned
diff -Naur gaol-4.2.0/gaol/gaol_port.h gaol-4.2.0/gaol/gaol_port.h
--- gaol-4.2.0/gaol/gaol_port.h	2012-03-06 18:08:58.000000000 +0100
+++ gaol-4.2.0/gaol/gaol_port.h	2019-06-21 12:00:49.052083077 +0200
@@ -144,9 +144,10 @@
 #  define HI_UINTDOUBLE(a) ((a).i[1])
 #endif
 
+uintdouble NaN_val();
+
 #ifndef GAOL_NAN
-  static uintdouble NaN_val = {{IFBIGENDIAN(0x7ff80000, 0x0)}};
-#define GAOL_NAN (gaol::NaN_val.d)
+#define GAOL_NAN (gaol::NaN_val().d)
 #endif
 
   // #define GAOL_INFINITY std::numeric_limits<double>::infinity()
diff -Naur gaol-4.2.0/gdtoa/dtoa.c gaol-4.2.0/gdtoa/dtoa.c
--- gaol-4.2.0/gdtoa/dtoa.c	2009-02-17 17:39:38.000000000 +0100
+++ gaol-4.2.0/gdtoa/dtoa.c	2019-06-21 10:39:11.771631058 +0200
@@ -73,7 +73,7 @@
 #define Rounding Flt_Rounds
 #endif
 
-int Flt_Rounds;
+int Flt_Rounds = 1; /* round to the nearest by default, patched by ibex */
 
  char *
 dtoa
